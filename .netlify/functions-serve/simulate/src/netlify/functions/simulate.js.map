{
  "version": 3,
  "sources": ["../../../../../../dev/heatninja_redo/heatninja_netlify/node_modules/web-worker/cjs/node.js", "../../../../../../dev/heatninja_redo/heatninja_netlify/netlify/functions/simulate.js"],
  "sourceRoot": "C:/Users/Jack/AppData/Local/Temp/tmp-18896-a6pJqQ8Fm9Yq",
  "sourcesContent": ["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst URL = require('url');\n\nconst VM = require('vm');\n\nconst threads = require('worker_threads');\n\nconst WORKER = Symbol.for('worker');\nconst EVENTS = Symbol.for('events');\n\nclass EventTarget {\n  constructor() {\n    Object.defineProperty(this, EVENTS, {\n      value: new Map()\n    });\n  }\n\n  dispatchEvent(event) {\n    event.target = event.currentTarget = this;\n\n    if (this['on' + event.type]) {\n      try {\n        this['on' + event.type](event);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    const list = this[EVENTS].get(event.type);\n    if (list == null) return;\n    list.forEach(handler => {\n      try {\n        handler.call(this, event);\n      } catch (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  addEventListener(type, fn) {\n    let events = this[EVENTS].get(type);\n    if (!events) this[EVENTS].set(type, events = []);\n    events.push(fn);\n  }\n\n  removeEventListener(type, fn) {\n    let events = this[EVENTS].get(type);\n\n    if (events) {\n      const index = events.indexOf(fn);\n      if (index !== -1) events.splice(index, 1);\n    }\n  }\n\n}\n\nfunction Event(type, target) {\n  this.type = type;\n  this.timeStamp = Date.now();\n  this.target = this.currentTarget = this.data = null;\n} // this module is used self-referentially on both sides of the\n// thread boundary, but behaves differently in each context.\n\n\nmodule.exports = threads.isMainThread ? mainThread() : workerThread();\nconst baseUrl = URL.pathToFileURL(process.cwd() + '/');\n\nfunction mainThread() {\n  /**\n   * A web-compatible Worker implementation atop Node's worker_threads.\n   *  - uses DOM-style events (Event.data, Event.type, etc)\n   *  - supports event handler properties (worker.onmessage)\n   *  - Worker() constructor accepts a module URL\n   *  - accepts the {type:'module'} option\n   *  - emulates WorkerGlobalScope within the worker\n   * @param {string} url  The URL or module specifier to load\n   * @param {object} [options]  Worker construction options\n   * @param {string} [options.name]  Available as `self.name` within the Worker\n   * @param {string} [options.type=\"classic\"]  Pass \"module\" to create a Module Worker.\n   */\n  class Worker extends EventTarget {\n    constructor(url, options) {\n      super();\n      const {\n        name,\n        type\n      } = options || {};\n      url += '';\n      let mod;\n\n      if (/^data:/.test(url)) {\n        mod = url;\n      } else {\n        mod = URL.fileURLToPath(new URL.URL(url, baseUrl));\n      }\n\n      const worker = new threads.Worker(__filename, {\n        workerData: {\n          mod,\n          name,\n          type\n        }\n      });\n      Object.defineProperty(this, WORKER, {\n        value: worker\n      });\n      worker.on('message', data => {\n        const event = new Event('message');\n        event.data = data;\n        this.dispatchEvent(event);\n      });\n      worker.on('error', error => {\n        error.type = 'error';\n        this.dispatchEvent(error);\n      });\n      worker.on('exit', () => {\n        this.dispatchEvent(new Event('close'));\n      });\n    }\n\n    postMessage(data, transferList) {\n      this[WORKER].postMessage(data, transferList);\n    }\n\n    terminate() {\n      this[WORKER].terminate();\n    }\n\n  }\n\n  Worker.prototype.onmessage = Worker.prototype.onerror = Worker.prototype.onclose = null;\n  return Worker;\n}\n\nfunction workerThread() {\n  let {\n    mod,\n    name,\n    type\n  } = threads.workerData; // turn global into a mock WorkerGlobalScope\n\n  const self = global.self = global; // enqueue messages to dispatch after modules are loaded\n\n  let q = [];\n\n  function flush() {\n    const buffered = q;\n    q = null;\n    buffered.forEach(event => {\n      self.dispatchEvent(event);\n    });\n  }\n\n  threads.parentPort.on('message', data => {\n    const event = new Event('message');\n    event.data = data;\n    if (q == null) self.dispatchEvent(event);else q.push(event);\n  });\n  threads.parentPort.on('error', err => {\n    err.type = 'Error';\n    self.dispatchEvent(err);\n  });\n\n  class WorkerGlobalScope extends EventTarget {\n    postMessage(data, transferList) {\n      threads.parentPort.postMessage(data, transferList);\n    } // Emulates https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/close\n\n\n    close() {\n      process.exit();\n    }\n\n  }\n\n  let proto = Object.getPrototypeOf(global);\n  delete proto.constructor;\n  Object.defineProperties(WorkerGlobalScope.prototype, proto);\n  proto = Object.setPrototypeOf(global, new WorkerGlobalScope());\n  ['postMessage', 'addEventListener', 'removeEventListener', 'dispatchEvent'].forEach(fn => {\n    proto[fn] = proto[fn].bind(global);\n  });\n  global.name = name;\n  const isDataUrl = /^data:/.test(mod);\n\n  if (type === 'module') {\n    import(mod).catch(err => {\n      if (isDataUrl && err.message === 'Not supported') {\n        console.warn('Worker(): Importing data: URLs requires Node 12.10+. Falling back to classic worker.');\n        return evaluateDataUrl(mod, name);\n      }\n\n      console.error(err);\n    }).then(flush);\n  } else {\n    try {\n      if (/^data:/.test(mod)) {\n        evaluateDataUrl(mod, name);\n      } else {\n        require(mod);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n\n    Promise.resolve().then(flush);\n  }\n}\n\nfunction evaluateDataUrl(url, name) {\n  const {\n    data\n  } = parseDataUrl(url);\n  return VM.runInThisContext(data, {\n    filename: 'worker.<' + (name || 'data:') + '>'\n  });\n}\n\nfunction parseDataUrl(url) {\n  let [m, type, encoding, data] = url.match(/^data: *([^;,]*)(?: *; *([^,]*))? *,(.*)$/) || [];\n  if (!m) throw Error('Invalid Data URL.');\n  if (encoding) switch (encoding.toLowerCase()) {\n    case 'base64':\n      data = Buffer.from(data, 'base64').toString();\n      break;\n\n    default:\n      throw Error('Unknown Data URL encoding \"' + encoding + '\"');\n  }\n  return {\n    type,\n    data\n  };\n}", "import Worker from 'web-worker';\r\n\r\nexports.handler = async function (event, context) {\r\n    try {\r\n        const p = event.queryStringParameters;\r\n\r\n        const parameter_names = [\r\n            \"postcode\",\r\n            \"latitude\",\r\n            \"longitude\",\r\n            \"occupants\",\r\n            \"temperature\",\r\n            \"space_heating\",\r\n            \"floor_area\",\r\n            \"tes_max\",\r\n        ];\r\n\r\n        function sendError(errorMsg) {\r\n            return {\r\n                statusCode: 404,\r\n                body: JSON.stringify({\r\n                    error: errorMsg,\r\n                    inputs: p\r\n                }),\r\n            };\r\n        }\r\n\r\n        let undefined_parameter = false;\r\n        for (const name of parameter_names) {\r\n            const value = p[name];\r\n            if (value == undefined) {\r\n                undefined_parameter = true;\r\n            }\r\n            // console.log(parameter, value);\r\n        }\r\n\r\n        if (!undefined_parameter) {\r\n            // console.log('parameters: ', p);\r\n\r\n            if (isNaN(p.floor_area) || p.floor_area < 25 || p.floor_area > 1500) {\r\n                return sendError(`The floor area is set to: ${p.floor_area}. This is either not a number, less than 25 m^2, or greater than 1500m^2`);\r\n            } else if (isNaN(p.tes_max) || p.tes_max < 0.1 || p.tes_max > 3.0) {\r\n                return sendError(`The tes-max is set to: ${p.tes_max}. This is either not a number, less than 0.1 m^3, or greater than 3.0m^3`);\r\n            } else {\r\n                const worker = new Worker('./pkg/webworker.cjs');\r\n\r\n                const result = await new Promise((resolve, reject) => {\r\n                    // console.log('PROMISE');\r\n                    worker.addEventListener('message', e => {\r\n                        // console.log('MSG', e.data);\r\n                        resolve(e.data);\r\n                    });\r\n\r\n                    setTimeout(() => {\r\n                        // console.log('TIMEOUT');\r\n                        resolve('timeout');\r\n                    }, 9500);\r\n\r\n                    worker.postMessage(p);\r\n                });\r\n\r\n                // console.log('result', result);\r\n\r\n                if (result === 'timeout') {\r\n                    return sendError(`simulation exceeded allowed runtime of 9500ms`);\r\n                } else {\r\n                    return {\r\n                        statusCode: 200,\r\n                        body: JSON.stringify({\r\n                            inputs: p,\r\n                            result: JSON.parse(result),\r\n                        }),\r\n                    };\r\n                }\r\n            }\r\n        } else {\r\n            let url = event.headers.host + event.path;\r\n            return sendError(`not all parameters defined. Example parameters: ${url}?postcode=CV47AL&latitude=52.3833&longitude=-1.5833&occupants=2&temperature=20&space_heating=3000&floor_area=60&tes_max=0.5`);\r\n        }\r\n    }\r\n    catch (error) {\r\n        return {\r\n            statusCode: 404,\r\n            body: JSON.stringify({ error: `An unhandled error occured. ${error}` }),\r\n        };\r\n    }\r\n};"],
  "mappings": "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",
  "names": []
}
